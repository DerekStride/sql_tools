#!/usr/bin/env ruby

require "fileutils"
require "optparse"
require "pathname"

app_root = if File.basename(__dir__) == "exe"
  File.expand_path("..", __dir__)
else
  File.expand_path(__dir__)
end
out = File.join(app_root, "treesitter")

options = {
  revision: "cdb7cde9bf70b194ab8beb5069fbbc3c9640284e",
  out:,
}

OptionParser.new do |o|
  HELP = o
  o.banner = "usage: install_tree_sitter_sql [options]"
  o.on("--revision SHA", "The version of the repo to clone")
  o.on("-o OUTDIR", "--out OUTDIR", "The destination directory for the parser library") do |dir|
    Pathname.new(File.expand_path(dir))
  end
  o.on_tail("-h", "--help") { puts o; exit(1) }
end.parse!(ARGV, into: options)

target = if RbConfig::CONFIG["host_os"] =~ /mac|darwin/
  File.join(options[:out], "sql.dylib")
else
  File.join(options[:out], "sql.so")
end

return if File.exist?(target)

# Create the target directory if it doesn't exist
FileUtils.mkdir_p(options[:out]) unless File.exist?(options[:out])

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==\n#{HELP}")
end

FileUtils.chdir(File.join("/", "tmp")) do
  repo_dir = "tree-sitter-sql-#{options[:revision]}"
  unless File.exist?(repo_dir)
    system! "git clone --depth=1 https://github.com/derekstride/tree-sitter-sql.git #{repo_dir}"
  end

  FileUtils.chdir(repo_dir) do
    unless File.exist?("parser.so")
      system! "git fetch origin #{options[:revision]}"
      system! "git checkout #{options[:revision]}"

      puts "Compiling..."
      system! "cc -shared -fPIC -I./src src/parser.c src/scanner.c -o parser.so"
    end

    return if File.exist?(target)

    puts "Copying parser.so to #{target}"
    FileUtils.cp("parser.so", target)
  end
end
